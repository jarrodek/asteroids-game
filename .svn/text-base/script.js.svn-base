var logger = null;

/**
 * Kody klawiszy używane do gry
 */
var Keys = {
    UP : 38,
    DOWN: 40,
    LEFT: 37,
    RIGHT: 39,
    SPACE: 32,
    codes: [32,37,38,39,40]
};
var canvasSize = [800,400];

function Game(){
    this.keysPressed = [];
    player = [];
    this.drawAsteroids = true;
    this.asteroidsCount = 5;
    this.mainLoopId = 0;
    this.gameCanvas = document.getElementById('game');
    this.context = this.gameCanvas.getContext("2d");
}
Game.prototype = {
    init: function(){
        this.observe();
        this.createBackground();
        this.createPlayerObject();
        if( this.drawAsteroids ){
            this.createAsteroids();
        }
    },
    observe: function(){
        document.body.addEventListener('keyup', this.listenUp.bind(this), true);
        document.body.addEventListener('keydown', this.listenDown.bind(this), true);
    },
    start: function(){
        document.querySelector("div.game-platform > div.game-overlay > div.overlay").classList.add("hidden");
        document.querySelector("div.game-platform > div.game-overlay > div.controls").detach();
        window.setTimeout( function(){
            document.querySelector("div.game-platform > div.game-overlay").detach();
            this.startLoop();
        }.bind(this), 300 );
    },
    listenUp: function(e){
        if( Keys.codes.indexOf( e.keyCode ) != -1 ){
            var index = this.keysPressed.indexOf( e.keyCode );
            if( index != -1 ){
                this.keysPressed.remove(index, index+1);
            }
            e.preventDefault();
        }
    },
    listenDown: function(e){
        
        if ( e.keyCode == 83 ){
            if( this.mainLoopId == 0 ){
                this.startLoop();
            } else {
                this.stopLoop();
            }
            
            return;
        }
        
        if( Keys.codes.indexOf( e.keyCode ) != -1 ){
            if( this.keysPressed.indexOf( e.keyCode ) == -1 ){
                this.keysPressed[this.keysPressed.length] = e.keyCode;
            }
            e.preventDefault();
        }
    },
    /**
     * Rysuje statyczne tło gry
     */
    createBackground: function(){
        var lingrad = this.context.createLinearGradient(0,0,0,canvasSize[1]);
        lingrad.addColorStop(0, '#232256');
        lingrad.addColorStop(1, '#143778');
        
        this.context.save();
        this.context.clearRect(0,0,canvasSize[0],canvasSize[1]);
        
        this.context.fillStyle = lingrad;
        this.context.fillRect(0,0,canvasSize[0],canvasSize[1]);
        
        //        for (var j=1;j<150;j++){
        //            this.context.save();
        //            this.context.fillStyle = '#fff';
        //            this.context.translate(canvasSize[0]-Math.floor(Math.random()*canvasSize[0]),
        //                    canvasSize[1]-Math.floor(Math.random()*canvasSize[1]));
        //            this.drawStar(Math.floor(Math.random()*4)+2);
        //            this.context.restore();
        //        }
        this.context.restore();
    },
    
    drawStar: function(r){
        this.context.save();
        this.context.beginPath();
        this.context.moveTo(r, 0);
        for (var i=0;i<9;i++){
            this.context.rotate(Math.PI/5);
            if(i%2 == 0) {
                this.context.lineTo((r/0.525731)*0.200811,0);
            } else {
                this.context.lineTo(r,0);
            }
        }
        this.context.closePath();
        this.context.fill();
        this.context.restore();
    },
    createPlayerObject: function(){
        var playerInitialPos = [];
        playerInitialPos[0] = canvasSize[0]/2-20;
        playerInitialPos[1] = 3*canvasSize[1]/4;
        var p = new Player(playerInitialPos[0], playerInitialPos[1]);
        player = [p];
        p.draw(this.context);
    },
    startLoop: function(){
        this.mainLoopId = window.setInterval(this.loop.bind(this), 24);
    },
    stopLoop: function(){
        window.clearInterval(this.mainLoopId);
        this.mainLoopId = 0;
    },
    loop: function(){
        this.createBackground();
        
        player.forEach(function(playerObj){
            playerObj.loopEvent(this.keysPressed);
            playerObj.step();
        },this);
        
        
        Bullets.forEach(function(bullet){
            bullet.step();
        });
        Asteroids.forEach(function(asteroid){
            asteroid.step();
        });
        
        
        var ctx = this.context;
        Bullets.forEach(function(bullet){
            if( bullet.lifeTime <= 0 )
                removeBullet(bullet);
        });
        player.forEach(function(playerObj){
            playerObj.draw(ctx);
        },this);
        Bullets.forEach(function(bullet){
            bullet.draw(ctx);
        });
        Asteroids.forEach(function(asteroid){
            asteroid.draw(ctx);
        });
        
        log.innerHTML = 'Asteroids: ' + Asteroids.length;
        
        if( Asteroids.length > 0 ){
            ctx.save();
            ctx.translate( 20, 20 );
            ctx.fillStyle = '#ffffff';
            ctx.fillText( Math.round(Asteroids[0].getX) +' x '+ Math.round(Asteroids[0].getY) + " " + Asteroids[0].r,0,0);
            ctx.restore();
        }
        
    },
    createAsteroids: function(){
        if( !(this.asteroidsCount > 0) ) return;
        do{
            var r = Math.rand(10,50);
            var x = 800-Math.floor(Math.random()*canvasSize[0]);
            var y = 400-Math.floor(Math.random()*canvasSize[1]);
            var angle = Math.rand(1,360) * (Math.PI/180);
            var v = Math.random()*1.8;
            if( v < 0.3 ){
                v = 0.3;
            }
            
//            x = 200;
//            y = 200;
//            angle = Math.toRadians(-45);
//            v = 4;
            
            
            var asteroid = new Asteroid(x, y, r, v, angle);
            if( this.isCollision(asteroid,true, 30) !== false ){
                asteroid = null;
                continue;
            }
            asteroid.draw( this.context );
            Asteroids[Asteroids.length] = asteroid;
            
            if( Asteroids.length >= this.asteroidsCount )
                break;
            
        } while(true);
        
    },
    
    isCollisionWithPlayer: function(){
        var pcnt = player.length;
        for (var j = 0; j < pcnt; j++) {
            var p = player[j];
            if( !p ) continue;
            var r = p.r;
            var pos = [p.getX,p.getY];
            //with asteroid
            var cnt = Asteroids.length;
            for( var i=0; i< cnt; i++ ){
                var ast = Asteroids[i];
                distance = this.calculateDistance( pos , [ast.getX,ast.getY] );
                if( distance <= (r+ast.r) ){
                    return ast;
                }
            }
            return false;
        }
    },
    
    isCollision: function(obj, checkPlayer, addPadding){
        addPadding = addPadding || 0;
        var oX = obj.getX;
        var oY = obj.getY;
        var oR = obj.r;
        oR += addPadding;
        
        //is collision with player?
        if(checkPlayer){
            var pcnt = player.length;
            for (var j = 0; j < pcnt; j++) {
                var p = player[j];
                var r = p.r;
                var x = p.getX;
                var y = p.getY;

                var distance = Math.floor( Math.sqrt( Math.pow( Math.abs(oX-x) , 2) + Math.pow( Math.abs( oY - y ) , 2) ) );
                if( distance <= (r+oR) ){
                    return p;
                }
            }
        }
        //with asteroid
        var cnt = Asteroids.length;
        for( var i=0; i< cnt; i++ ){
            var ast = Asteroids[i];
            distance = this.calculateDistance( [oX,oY] , [ast.getX,ast.getY] );
            if( distance <= (oR+ast.r) ){
                return ast;
            }
        }
        
        return false;
    },
    calculateDistance: function(obj1coord,obj2coord){
        return Math.floor( Math.sqrt( Math.pow( Math.abs(obj1coord[0]-obj2coord[0]) , 2) + Math.pow( Math.abs( obj1coord[1] - obj2coord[1] ) , 2) ) );
    }
}
/**
 * Sprawdza czy obiekt znajduje się na planszy.
 * Obiekt musi posiadać właściwości:
 * getX, getY, r
 */
function isObjectInLevel(obj){
    var x = obj.getX;
    var y = obj.getY;
    var r = obj.r;
    
    if( !(x > -r || x < canvasSize[0] + r) ){ //mieści się na osi OX
        return false;
    }
    if( !(y > -r || y < canvasSize[1] + r) ){//mieści się na osi OY
        return false;
    }
    return true;
}
/**
 * Podobnie jak isObjectInLevel tyle, 
 * że zwraca true kiedy obiekt w całości mieści się na planszy.
 * 
 */
function isObiectFullInLevel(obj){
    
    var x = obj.getX;
    var y = obj.getY;
    var r = obj.r;
    
    if( !(x >= r || x <= canvasSize[0]-r) ){
        return false;
    }
    if( !(y >= r <= 0 || y - r >= canvasSize[1]) ){
        return false;
    }
    return true;
}


function playerCrashedHandler(){
    var container = document.querySelector("div.game-platform");
    var button = document.createElement( 'button' );
    button.innerHTML = 'Zacznij jeszcze raz';
    container.appendChild(button);
    button.addEventListener('click', function(){
        Asteroids = [];
        Bullets = [];
        player = [];
        game = new Game();
        //game.drawAsteroids = false;
        game.init();
        game.start.bind(game);
        this.detach();
    });
    button.focus();
}

var game = null;

window.addEventListener('load', function(){
    game = new Game();
    game.drawAsteroids = false;
    //game.asteroidsCount = 1;
    game.init();
    document.querySelector("div.controls > button.begin").addEventListener('click', game.start.bind(game) );
    logger = document.getElementById( "log" );
});
