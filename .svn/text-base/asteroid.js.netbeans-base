var Asteroids = [];

function removeAsteriod(asteroid){
    var index = Asteroids.indexOf(asteroid);
    if( index != -1 ){
        Asteroids.remove(index, index);
    }
}


/**
 * @param {Number} x pozycja x
 * @param {Number} y pozycja y
 * @param {Number} r promień
 * @param {Number} v prędkość
 * @param {Number} angle  
 */
function Asteroid(x,y,r,v, angle){
    this.r = r;
    this.v = v;
    //    angle = Math.toRadians(90);
    //    this.v = 10;
    
    
    this.angle = angle;
    this.minR = 10;
    this.outOfBoundsY = false;
    this.outOfBoundsX = false;
    var degree = Math.toAbsDegrees(angle);
    
    this.isTop = ( degree > 180 && degree < 360 );
    this.isRight = ( degree > 270 || degree < 90 );
    this.isBottom = ( degree > 0 && degree < 180 );
    this.isLeft = ( degree < 270 && degree > 90 );
    
    this.__defineGetter__("getX",function(){
        return x;
    });
    this.__defineGetter__("getY",function(){
        return y;
    });
    this.__defineSetter__('setX',function(value){
        x = value;
    });
    this.__defineSetter__('setY',function(value){
        y = value;
    });
}
Asteroid.prototype = {
    step: function(){
        
        if( isObiectFullInLevel(this) ){
            removeAsteriod(this);
            return;
        }
        
        var a = -0.00005;
        this.v += a;
        this.v = Math.abs(this.v);
        
        if( this.v > 10 ){
            this.v = 10;
        }
        
        this.setX = this.getX + Math.cos(this.angle) * this.v;
        this.setY = this.getY + Math.sin(this.angle) * this.v;
        var newY = this.getY;
        var newX = this.getX;
        var padding = this.r;
        
        var boundsX = ( (newX < padding) || (newX > canvasSize[0]-padding) );
        var boundsY = ( (newY < padding) || (newY > canvasSize[1]-padding) );
        
        if( boundsX && boundsY ){
            if( !this.outOfBoundsY && !this.outOfBoundsX ){
                var _nx = 0;
                var _ny = 0;

                if( (newX - padding) <= 0 ){
                    _nx = canvasSize[0] + newX;
                } else {
                    _nx = newX-canvasSize[0];
                }

                if( (newY - padding) <= 0 ){
                    _ny = canvasSize[1] + newY;
                } else {
                    _ny = newY - canvasSize[1];
                }

                var aXY = null;
                aXY = new Asteroid(_nx, _ny, this.r, this.v,this.angle);
                aXY.outOfBoundsY = true;
                aXY.outOfBoundsX = true;
                Asteroids[Asteroids.length] = aXY;
                this.outOfBoundsY = true;
                this.outOfBoundsX = true;
            } else {
                if( !isObiectFullInLevel(this) ){
                    removeAsteriod(this);
                }
                
            }
            
        } else if( boundsY ){
            if( !this.outOfBoundsY && !this.outOfBoundsX ){
                var aY = null;
                if(newY > canvasSize[1]-padding){
                    aY = new Asteroid(newX, -(canvasSize[1]-newY), this.r, this.v,this.angle);
                    aY.outOfBoundsY = true;
                    Asteroids[Asteroids.length] = aY;
                    this.outOfBoundsY = true;
                } else {
                    aY = new Asteroid(newX, canvasSize[1]+newY, this.r, this.v,this.angle);
                    aY.outOfBoundsY = true;
                    Asteroids[Asteroids.length] = aY;
                    this.outOfBoundsY = true;
                }
            } else if( this.outOfBoundsY ){
                if( (this.isTop && newY < -padding) || (this.isBottom && newY > canvasSize[1]+padding) ){
                    removeAsteriod(this);
                } else {
                    if( this.isTop && newY > padding && newY < canvasSize[1]-padding ){ 
                        this.outOfBoundsY = false;
                    } else if( this.isBottom && newY < canvasSize[1]-padding && newY > padding){
                        this.outOfBoundsY = false;
                    }
                }
            }
        } else if( boundsX ){
            if( !this.outOfBoundsY && !this.outOfBoundsX ){
                var aX = null;
                if( this.isLeft ){
                    aX = new Asteroid(canvasSize[0]+newX, newY, this.r, this.v,this.angle);
                } else {
                    aX = new Asteroid(canvasSize[0]-newX, newY, this.r, this.v,this.angle);
                }
                aX.outOfBoundsX = true;
                Asteroids[Asteroids.length] = aX;
                this.outOfBoundsX = true;
            } else if( this.outOfBoundsX ){
                if( (this.isLeft && newX < -20) || (this.isRight && newX > canvasSize[0]+padding) ){
                    removeAsteriod(this);
                } else {
                    if( this.isLeft && newX > padding && newX < canvasSize[0]-padding ){ 
                        this.outOfBoundsX = false;
                    } else if( this.isRight && newX < canvasSize[0]-padding && newX > padding){
                        this.outOfBoundsX = false;
                    }
                }
            }
        } else {
            if( this.outOfBoundsY ){
                if( this.isTop && newY > padding && newY < canvasSize[1]-padding ){ 
                    this.outOfBoundsY = false;
                } else if( this.isBottom && newY < canvasSize[1]-padding && newY > padding){
                    this.outOfBoundsY = false;
                }
            } 
            if( this.outOfBoundsX ){
                if( this.isLeft && newX > padding && newX < canvasSize[0]-padding ){ 
                    this.outOfBoundsX = false;
                } else if( this.isRight && newX < canvasSize[0]-padding && newX > padding){
                    this.outOfBoundsX = false;
                }
            }
        }
    },
    draw: function(ctx){
        ctx.save();
        ctx.translate( this.getX, this.getY );
        ctx.strokeStyle = "#D40000";
        ctx.fillStyle = '#fff';
        ctx.beginPath();
        ctx.arc(0,0,this.r,0,360,true);
        ctx.stroke();
        ctx.fill();
        
        ctx.restore();
    },
    divide: function(){
        if( this.r <= this.minR ){
            removeAsteriod(this);
            return;
        }
        var angle1 = Math.toRadians( Math.toDegrees(this.angle)-30 );
        var angle2 = -angle1;
        
        var asteroid1 = new Asteroid(this.getX, this.getY, this.r/2, this.v*1.5, angle1);
        var asteroid2 = new Asteroid(this.getX, this.getY, this.r/2, this.v*1.5, angle2);
        
        asteroid1.outOfBoundsY = asteroid2.outOfBoundsY = this.outOfBoundsY;
        asteroid1.outOfBoundsX = asteroid2.outOfBoundsX = this.outOfBoundsX;
        
        Asteroids[Asteroids.length] = asteroid1;
        Asteroids[Asteroids.length] = asteroid2;
        
        removeAsteriod(this);
    }
}